#eks-cluster-step-by-steps
TABLE OF CONTENTS
Step1: How to install and setup Terraform on Windows
Step2: Download the AWS CLI Installer:
Step3: create an IAM user
Step4: Aws Configure
Step5: Terraform files and Provision
In the world of cloud computing and container orchestration, Amazon Web Services (AWS) Elastic Kubernetes Service (EKS) stands out as a popular choice for managing and scaling containerized applications. Combining the power of EKS with Infrastructure as Code (IaC) using Terraform makes infrastructure management even more efficient and predictable. In this step-by-step guide, we'll walk you through the process of provisioning an AWS EKS cluster using Terraform.

Before diving into the tutorial, make sure you have the following prerequisites in place:

AWS Account: You'll need an AWS account to create and manage resources.

AWS CLI: Install the AWS Command Line Interface and configure it with your AWS credentials.

Terraform: Download and install Terraform on your local machine.

Step1: How to install and setup Terraform on Windows
Download Terraform:

Visit the official Terraform website: terraform.io/downloads.html

Extract the ZIP Archive:

Once the download is complete, extract the contents of the ZIP archive to a directory on your computer. You can use a tool like 7-Zip or the built-in Windows extraction tool. Ensure that you extract it to a directory that's part of your system's PATH.

Remember that I created a Terraform Directory in C drive

Extracted to C drive

Copy the path
Add Terraform to Your System's PATH:

To make Terraform easily accessible from the command prompt, add the directory where Terraform is extracted to your system's PATH environment variable. Follow these steps:

Search for "Environment Variables" in your Windows search bar and click "Edit the system environment variables."

In the "System Properties" window, click the "Environment Variables" button.

Under "User variables for Admin," find the "Path" variable and click "Edit."

Click on New paste the copied path and click on OK

Under "System variables," find the "Path" variable and click "Edit."

Click "New" and add the path to the directory where you extracted Terraform (e.g., C:\path\to\terraform).

Click "OK" to close the Environment Variables windows.

Click "OK" again to close the System Properties window.

Verify the Installation:

Open a new Command Prompt or PowerShell window.

Type terraform --version and press Enter. This command should display the Terraform version, confirming that Terraform is installed and in your PATH.

Your Terraform installation is now complete, and you can start using Terraform to manage your infrastructure as code.

Step2: Download the AWS CLI Installer:
Visit the AWS CLI Downloads page: aws.amazon.com/cli

Under "Install the AWS CLI," click on the "64-bit" link to download the AWS CLI installer for Windows.

Run the Installer:

Locate the downloaded installer executable (e.g., AWSCLIV2.exe) and double-click it to run the installer.

Click on Next

Agree to the terms and click on Next

Click Next

Click on install

Click Finish Aws cli is installed

Verify the Installation:

Open a Command Prompt or PowerShell window.

Type aws --version and press Enter. This command should display the AWS CLI version, confirming that the installation was successful.

Step3: create an IAM user
Navigate to the AWS console

Click the "Search" field.

Search for IAM

Click "Users"

Click "Add users"

Click the "User name" field.

Type "Terraform" or as you wish about the name

Click Next

Click "Attach policies directly"

Click this checkbox with Administrator access

Click "Next"

Click "Create user"

Click newly created user in my case Ajay

Click "Security credentials"

Click "Create access key"

Click this radio button with the CLI

Agree to terms

Click Next

Click "Create access key"

Download .csv file

Step4: Aws Configure
Go to vs code or Cmd your wish

COPY

COPY
aws configure
Provide your Aws Access key and Secret Access key

Step5: Terraform files and Provision
Provider.tf

COPY

COPY
-------------------------------------------------------------------------------------

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "ap-south-1"  #change your region
}
---------------------------------------------------------------------------------------
#create file
Main.tf

resource "aws_iam_role" "eks_cluster" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy_attachment" "eks_cluster_policy" {
  name       = "eks-cluster-policy"
  roles      = [aws_iam_role.eks_cluster.name]
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

# Get default VPC id
data "aws_vpc" "default" {
  default = true
}

# Get public subnets in VPC
data "aws_subnets" "public" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}

resource "aws_eks_cluster" "eks" {
  name     = "my-eks-cluster"
  role_arn = aws_iam_role.eks_cluster.arn

  vpc_config {
    subnet_ids = data.aws_subnets.public.ids
  }
}

resource "aws_iam_role" "example" {
  name = "eks-node-group-example"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
    Version = "2012-10-17"
  })
}

resource "aws_iam_role_policy_attachment" "example-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.example.name
}

resource "aws_iam_role_policy_attachment" "example-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.example.name
}

resource "aws_iam_role_policy_attachment" "example-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.example.name
}

# Create managed node group
resource "aws_eks_node_group" "example" {
  cluster_name    = aws_eks_cluster.eks.name
  node_group_name = "managed-nodes"
  node_role_arn   = aws_iam_role.example.arn

  subnet_ids = data.aws_subnets.public.ids
  scaling_config {
    desired_size = 1
    max_size     = 2
    min_size     = 1
  }
  instance_types = ["t2.micro"]

  depends_on = [
    aws_iam_role_policy_attachment.example-AmazonEKSWorkerNodePolicy,
    aws_iam_role_policy_attachment.example-AmazonEKS_CNI_Policy,
    aws_iam_role_policy_attachment.example-AmazonEC2ContainerRegistryReadOnly,
    aws_eks_cluster.eks
  ]
}
---------------------------------------------------------------------------------------
#terraform-commands
terraform init
terraform validate
terraform plan
terraform apply
Once this is done you will see EKS cluster is created in the Aws console

In the cluster, click on Cloud shell



Now it will open a cloud shell to run commands and update Kubernetes configuration

aws eks update-kubeconfig --name my-eks-cloud --region ap-south-1
Now add your iam credentials that were created. Not to get an error like this

aws configure #add ur credentials


COPY
kubectl get nodes


To Destroy
------------------------------------------------------------------------------------------


